// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Echo provides a mock function with given fields: ctx, w, r
func (_m *Service) Echo(ctx context.Context, w http.ResponseWriter, r *http.Request) error {
	ret := _m.Called(ctx, w, r)

	if len(ret) == 0 {
		panic("no return value specified for Echo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, http.ResponseWriter, *http.Request) error); ok {
		r0 = rf(ctx, w, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Monitor provides a mock function with given fields: ctx
func (_m *Service) Monitor(ctx context.Context) {
	_m.Called(ctx)
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
