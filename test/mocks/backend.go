// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// Backend is an autogenerated mock type for the Backend type
type Backend struct {
	mock.Mock
}

// Alive provides a mock function with given fields:
func (_m *Backend) Alive() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Alive")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Do provides a mock function with given fields: _a0, _a1
func (_m *Backend) Do(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// HealthCheckURL provides a mock function with given fields:
func (_m *Backend) HealthCheckURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HealthCheckURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetAlive provides a mock function with given fields: _a0
func (_m *Backend) SetAlive(_a0 bool) {
	_m.Called(_a0)
}

// URL provides a mock function with given fields:
func (_m *Backend) URL() *url.URL {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for URL")
	}

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// NewBackend creates a new instance of Backend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *Backend {
	mock := &Backend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
